managed;
strict ( 2 );
with draft;

define behavior for ZTRAVEL_R_CAZ alias Travel
implementation in class zbp_travel_r_caz unique
persistent table ztravel_caz_a
draft table ztravel_caz_d
lock master
total etag LastChangedAt
etag master LocalLastChangedAt
authorization master ( instance, global )
{
  create; // ( authorization : global ); //Already managed in instance
  update;
  delete;
  // feature: instance. Cuando creamos un registro no creamos a nivel global
  // Cuando sería global?
  association _Booking { create( features : instance, authorization : update); with draft;  }

  field ( numbering : managed, readonly ) TravelUUID; // Managed and auto numbering
  field ( readonly ) TravelID, OverallStatus, TotalPrice,
  LocalCreatedAt, LocalCreatedBy, LocalLastChangedAt, LocalLastChangedBy; // Non-editable fields

  field ( mandatory ) CustomerID, CurrencyCode, AgencyID, BeginDate, EndDate; //Mandatory fields

  // Este campo tiene ciertas características o comportamientos adicionales
  field ( features : instance ) BookingFee;

  // Hay sólo dos tipos de determination save and modify

  // Este quiere decir, cuándo se hace un guardado al momento de la creación solamente
  determination setTravelNumber on save { create; }
  // Este quiere decir, cuándo se hace una modificación pero sólo al momento de la creación
  determination setStatusToOpen on modify { create; }
  // Este quiere decir, cuándo se hace una modificación pero sólo al momento de la creación
  // usando información de esos campos
  determination calculateTotalPrice on modify { create; field BookingFee, CurrencyCode; }

  //Serían como las acciones o botones, se define como un feeature, la atuorización y el
  //método. En este caso el resultado es uno sólo y $self indica que al realizar la acción
  //me devuelvo al mismo registro al que dí clic, a este registro se le llama instancia, una
  //instancia es un registro en las entidades
  action ( features : instance, authorization : update ) acceptTravel result [1] $self;
  action ( features : instance, authorization : update ) rejectTravel result [1] $self;
  // Se usa el parámetro de la entidad abstracta
  action ( features : instance, authorization : update ) deductDiscount
    parameter ZAB_DISCOUNT_CAZ result [1] $self;

  // Acciones que no son visibles para el usuario, podría decirse que son funciones que pueden usar otros métodos
  internal action reCalcTotalPrice;

  // Defino la validación
  validation validateCustomer on save { create; field CustomerID; }
  validation validateAgency on save { create; field AgencyID; }
  validation validateDates on save { create; field BeginDate, EndDate; }
  validation validateCurrency on save { create; field CurrencyCode; }
  validation validateBookingFee on save { create; field BookingFee; }

  // Quien ejecuta la validación
  determine action validateCustomerID { validation validateCustomer; }
  determine action validateAgencyID { validation validateAgency; }
  determine action validateDatesAct { validation validateDates; }
  determine action validateCurrencyAct { validation validateCurrency; }

  // Si hay un cambio sobre algo habrá un efecto alterno sobre otro componente
  side effects
  {
    field BookingFee affects field TotalPrice;
    determine action ValidateCustomerID executed on field CustomerID affects messages;
    determine action validateAgencyID executed on field AgencyID affects messages;
    determine action validateDatesAct executed on field BeginDate, field EndDate affects messages;

  }

  //Activando posibilidades del draft
  draft action Edit;
  draft action Activate optimized; // Qué es optimizado
  draft action Discard;
  draft action Resume with additional implementation;

  //Actions del draft
  draft determine action Prepare
  {

    // Principalmente validaciones
    validation validateCustomer;
    validation validateAgency;
    validation validateDates;
    validation validateCurrency;
    validation validateBookingFee;


    //Validations from other entities
    validation Booking~validateCustomer;
    validation Booking~validateConnection;
    validation Booking~validateCurrency;
    validation Booking~validateFlightPrice;
    validation Booking~validateStatus;

    validation BookingSupplement~validateSupplement;
    validation BookingSupplement~validateCurrency;
    validation BookingSupplement~validatePrice;

  }
  mapping for ztravel_caz_a
    {
      TravelUUID         = travel_uuid;
      TravelID           = travel_id;
      AgencyID           = agency_id;
      CustomerID         = customer_id;
      BeginDate          = begin_date;
      EndDate            = end_date;
      BookingFee         = booking_fee;
      TotalPrice         = total_price;
      CurrencyCode       = currency_code;
      Description        = description;
      OverallStatus      = overall_status;
      LocalCreatedBy     = local_created_by;
      LocalCreatedAt     = local_created_at;
      LocalLastChangedBy = local_last_changed_by;
      LocalLastChangedAt = local_last_changed_at;
      LastChangedAt      = last_changed_at;
    }
}

define behavior for zbooking_r_caz alias Booking
implementation in class zbp_booking_r_caz unique
persistent table zbooking_caz_a
draft table zbooking_caz_d
lock dependent by _Travel
authorization dependent by _Travel
//etag master <field_name>
{
  update;
  delete;
  // Esta parte es enredada
  association _BookingSupplement { create (authorization : update); with draft; }
  association _Travel{ with draft; }

  field( numbering : managed, readonly ) BookingUUID;
  field ( readonly ) TravelUUID, BookingID, BookingDate, LocalLastChangedAt;
  field ( mandatory ) CustomerID, AirlineID, ConnectionID, FlightDate, FlightPrice, CurrencyCode;

  determination setBookingNumber on save { create; }
  determination setBookingDate on save { create; }
  determination calculateTotalPrice on modify { create; field FlightPrice, CurrencyCode; }

  // Defino la validación
  validation validateCustomer on save { create; field CustomerID; }
  validation validateConnection on save { create; field AirlineID, ConnectionID, FlightDate; }
  validation validateCurrency on save { create; field CurrencyCode; }
  validation validateFlightPrice on save { create; field FlightPrice; }
  validation validateStatus on save { create; field BookingStatus; }

  determine action validateFlightCost { validation validateFlightPrice; }

  side effects{

    field FlightPrice affects field _Travel.TotalPrice;
    determine action validateFlightCost executed on field FlightPrice affects messages;
  }

  mapping for zbooking_caz_a{

      BookingUUID        = booking_uuid;
      TravelUUID         = travel_uuid;
      BookingID          = booking_id;
      BookingDate        = booking_date;
      CustomerID         = customer_id;
      AirlineID          = airline_id;
      ConnectionID       = connection_id;
      FlightDate         = flight_date;
      FlightPrice        = flight_price;
      CurrencyCode       = currency_code;
      BookingStatus      = booking_status;
      LocalLastChangedAt = local_last_changed_at;

  }

}
//test
define behavior for ZBKSPPL_R_CAZZ alias BookingSupplement
implementation in class zbp_BKSPPL_r_caz unique
persistent table zbksppl_caz_a
draft table zbksppl_caz_d
lock dependent by _Travel
authorization dependent by _Travel
etag master LocalLastChangedAt
{
  update;
  delete;

  association _Travel { with draft; }
  association _Booking { with draft; }

  field ( numbering : managed, readonly ) BookSupplUUID;
  field ( readonly ) TravelUUID, BookingUUID, BookingSupplementID, LocalLastChangedAt;
  field ( mandatory ) SupplementID, Price, CurrencyCode;

  determination setBookSupplNumber on modify { create; }
  determination calculateTotalPrice on modify { create; field Price, CurrencyCode; }

  validation validateSupplement on save { create; field SupplementID; }
  validation validateCurrency on save { create; field SupplementID; }
  validation validatePrice on save { create; field Price; }

  determine action validateSupplementPrice { validation validateSupplement; }

  side effects {
    field Price affects field _Travel.TotalPrice;
    determine action validateSupplementPrice executed on field SupplementID affects messages;
   }

   mapping for zbksppl_caz_a
   {
      BookSupplUUID       = booksuppl_uuid;
      TravelUUID          = travel_uuid;
      BookingUUID         = booking_uuid;
      BookingSupplementID = booking_supplement_id;
      SupplementID        = supplement_id;
      Price               = price;
      CurrencyCode        = currency_code;
      LocalLastChangedAt  = local_last_changed_at;
   }

}